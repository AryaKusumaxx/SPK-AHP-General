import { writable, derived } from 'svelte/store';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function withPrevious(initValue, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.numToTrack, numToTrack = _c === void 0 ? 1 : _c, _d = _b.initPrevious, initPrevious = _d === void 0 ? [] : _d, _e = _b.requireChange, requireChange = _e === void 0 ? true : _e, _f = _b.isEqual, isEqual = _f === void 0 ? function (a, b) { return a === b; } : _f;
    if (numToTrack <= 0) {
        throw new Error('Must track at least 1 previous');
    }
    // Generates an array of size numToTrack with the first element set to
    // initValue and all other elements set to ...initPrevious or null.
    var rest = initPrevious.slice(0, numToTrack);
    while (rest.length < numToTrack) {
        rest.push(null);
    }
    var values = writable(__spreadArray([initValue], rest, true));
    var updateCurrent = function (fn) {
        values.update(function ($values) {
            var newValue = fn($values[0]);
            // Prevent updates if values are equal as defined by an isEqual
            // comparison. By default, use a simple === comparison.
            if (requireChange && isEqual(newValue, $values[0])) {
                return $values;
            }
            // Adds the new value to the front of the array and removes the oldest
            // value from the end.
            return __spreadArray([newValue], $values.slice(0, numToTrack), true);
        });
    };
    var current = {
        subscribe: derived(values, function ($values) { return $values[0]; }).subscribe,
        update: updateCurrent,
        set: function (newValue) {
            updateCurrent(function () { return newValue; });
        },
    };
    // Create an array of derived stores for every other element in the array.
    var others = __spreadArray([], Array(numToTrack), true).map(function (_, i) {
        return derived(values, function ($values) { return $values[i + 1]; });
    });
    return __spreadArray([current], others, true);
}
/**
 * @deprecated Since version 2.0.1. Use `withPrevious` instead.
 */
var usePrevious = withPrevious;

export { usePrevious, withPrevious };
